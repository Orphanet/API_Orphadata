---
swagger: "2.0"
info:
  description: "This is the Orphadata API.\n For this sample, you can use the api\
    \ key `special-key` to test the authorization filters."
  version: "1.0.0"
  title: "Orphadata API"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "cyril.bigot@inserm.fr"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "Orphadata"
basePath: "/v2"
tags:
- name: "Disorder"
  description: "Request informations about disorders by their OrphaNumbers"
  externalDocs:
    description: "Find out more at Orphanet"
    url: "https://www.orpha.net/consor/cgi-bin/index.php"
- name: "user"
  description: "Defines users and their permissions"
  externalDocs:
    description: "url to admin site?"
    url: "http://swagger.io"
schemes:
- "https"
- "http"
paths:
  /{OrphaNumber}:
    get:
      tags:
      - "OrphaNumber"
      summary: "Find a disorder by ORPHAnumber"
      description: "Returns a single OrphaNumber"
      operationId: "get_orpha_number_by_id"
      produces:
      - "application/json"
      parameters:
      - name: "OrphaNumber"
        in: "path"
        description: "Disorder with OrphaNumber to return"
        required: true
        type: "integer"
        format: "int32"
      responses:
        "200":
          description: "successful request"
          schema:
            $ref: "#/definitions/OrphaNumber"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "OrphaNumber not found"
      security:
      - api_key: []
      x-swagger-router-controller: "swagger_server.controllers.orpha_number_controller"
  /user:
    post:
      tags:
      - "user"
      summary: "Create user"
      description: "This can only be done by the logged in user."
      operationId: "create_user"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
      x-swagger-router-controller: "swagger_server.controllers.user_controller"
  /user/createWithArray:
    post:
      tags:
      - "user"
      summary: "Creates list of users with given input array"
      description: ""
      operationId: "create_users_with_array_input"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "List of user object"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
      x-swagger-router-controller: "swagger_server.controllers.user_controller"
  /user/createWithList:
    post:
      tags:
      - "user"
      summary: "Creates list of users with given input array"
      description: ""
      operationId: "create_users_with_list_input"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "List of user object"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
      x-swagger-router-controller: "swagger_server.controllers.user_controller"
  /user/login:
    get:
      tags:
      - "user"
      summary: "Logs user into the system"
      description: ""
      operationId: "login_user"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "query"
        description: "The user name for login"
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "The password for login in clear text"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          headers:
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the user"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
          schema:
            type: "string"
        "400":
          description: "Invalid username/password supplied"
      x-swagger-router-controller: "swagger_server.controllers.user_controller"
  /user/logout:
    get:
      tags:
      - "user"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logout_user"
      produces:
      - "application/xml"
      - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"
      x-swagger-router-controller: "swagger_server.controllers.user_controller"
  /user/{username}:
    get:
      tags:
      - "user"
      summary: "Get user by user name"
      description: ""
      operationId: "get_user_by_name"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be fetched. Use user1 for testing. "
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
      x-swagger-router-controller: "swagger_server.controllers.user_controller"
    put:
      tags:
      - "user"
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: "update_user"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "name that need to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        "400":
          description: "Invalid user supplied"
        "404":
          description: "User not found"
      x-swagger-router-controller: "swagger_server.controllers.user_controller"
    delete:
      tags:
      - "user"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "delete_user"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be deleted"
        required: true
        type: "string"
      responses:
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
      x-swagger-router-controller: "swagger_server.controllers.user_controller"
securityDefinitions:
  OrphaNumberstore_auth:
    type: "oauth2"
    authorizationUrl: "http://OrphaNumberstore.swagger.io/oauth/dialog"
    flow: "implicit"
    scopes:
      read:OrphaNumbers: "Query disorders by OrphaNumbers"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"
      userStatus:
        type: "integer"
        format: "int32"
        description: "User Status"
    xml:
      name: "User"
    example:
      firstName: "firstName"
      lastName: "lastName"
      password: "password"
      userStatus: 6
      phone: "phone"
      id: 0
      email: "email"
      username: "username"
  OrphaNumber:
    type: "object"
    required:
    - "name"
    properties:
      id:
        type: "integer"
        format: "int32"
        example: 558
      name:
        type: "string"
        example: "Marfan syndrome"
    xml:
      name: "OrphaNumber"
    example:
      name: "Marfan syndrome"
      id: 558
externalDocs:
  description: "Find out more about Orphadata"
  url: "http://www.orphadata.org/cgi-bin/index.php"

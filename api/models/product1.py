# coding: utf-8

from __future__ import absolute_import

from typing import List  # noqa: F401

from api.models.base_model_ import Model
from api.models.product1_disorder_disorder_association import Product1DisorderDisorderAssociation  # noqa: F401,E501
from api.models.product1_disorder_flag import Product1DisorderFlag  # noqa: F401,E501
from api.models.product1_disorder_type import Product1DisorderType  # noqa: F401,E501
from api.models.product1_external_reference import Product1ExternalReference  # noqa: F401,E501
from api.models.product1_textual_information import Product1TextualInformation  # noqa: F401,E501
from api import util


class Product1(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, orph_acode: int=None, expert_link: str=None, name: str=None, disorder_flag: List[Product1DisorderFlag]=None, synonym: List[str]=None, disorder_type: Product1DisorderType=None, disorder_nature: str=None, disorder_group: str=None, external_reference: List[Product1ExternalReference]=None, disorder_disorder_association: List[Product1DisorderDisorderAssociation]=None, textual_information: List[Product1TextualInformation]=None):  # noqa: E501
        """Product1 - a model defined in Swagger

        :param orph_acode: The orph_acode of this Product1.  # noqa: E501
        :type orph_acode: int
        :param expert_link: The expert_link of this Product1.  # noqa: E501
        :type expert_link: str
        :param name: The name of this Product1.  # noqa: E501
        :type name: str
        :param disorder_flag: The disorder_flag of this Product1.  # noqa: E501
        :type disorder_flag: List[Product1DisorderFlag]
        :param synonym: The synonym of this Product1.  # noqa: E501
        :type synonym: List[str]
        :param disorder_type: The disorder_type of this Product1.  # noqa: E501
        :type disorder_type: Product1DisorderType
        :param disorder_nature: The disorder_nature of this Product1.  # noqa: E501
        :type disorder_nature: str
        :param disorder_group: The disorder_group of this Product1.  # noqa: E501
        :type disorder_group: str
        :param external_reference: The external_reference of this Product1.  # noqa: E501
        :type external_reference: List[Product1ExternalReference]
        :param disorder_disorder_association: The disorder_disorder_association of this Product1.  # noqa: E501
        :type disorder_disorder_association: List[Product1DisorderDisorderAssociation]
        :param textual_information: The textual_information of this Product1.  # noqa: E501
        :type textual_information: List[Product1TextualInformation]
        """
        self.swagger_types = {
            'orph_acode': int,
            'expert_link': str,
            'name': str,
            'disorder_flag': List[Product1DisorderFlag],
            'synonym': List[str],
            'disorder_type': Product1DisorderType,
            'disorder_nature': str,
            'disorder_group': str,
            'external_reference': List[Product1ExternalReference],
            'disorder_disorder_association': List[Product1DisorderDisorderAssociation],
            'textual_information': List[Product1TextualInformation]
        }

        self.attribute_map = {
            'orph_acode': 'ORPHAcode',
            'expert_link': 'ExpertLink',
            'name': 'Name',
            'disorder_flag': 'DisorderFlag',
            'synonym': 'Synonym',
            'disorder_type': 'DisorderType',
            'disorder_nature': 'DisorderNature',
            'disorder_group': 'DisorderGroup',
            'external_reference': 'ExternalReference',
            'disorder_disorder_association': 'DisorderDisorderAssociation',
            'textual_information': 'TextualInformation'
        }
        self._orph_acode = orph_acode
        self._expert_link = expert_link
        self._name = name
        self._disorder_flag = disorder_flag
        self._synonym = synonym
        self._disorder_type = disorder_type
        self._disorder_nature = disorder_nature
        self._disorder_group = disorder_group
        self._external_reference = external_reference
        self._disorder_disorder_association = disorder_disorder_association
        self._textual_information = textual_information

    @classmethod
    def from_dict(cls, dikt) -> 'Product1':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The product1 of this Product1.  # noqa: E501
        :rtype: Product1
        """
        return util.deserialize_model(dikt, cls)

    @property
    def orph_acode(self) -> int:
        """Gets the orph_acode of this Product1.


        :return: The orph_acode of this Product1.
        :rtype: int
        """
        return self._orph_acode

    @orph_acode.setter
    def orph_acode(self, orph_acode: int):
        """Sets the orph_acode of this Product1.


        :param orph_acode: The orph_acode of this Product1.
        :type orph_acode: int
        """
        if orph_acode is None:
            raise ValueError("Invalid value for `orph_acode`, must not be `None`")  # noqa: E501

        self._orph_acode = orph_acode

    @property
    def expert_link(self) -> str:
        """Gets the expert_link of this Product1.


        :return: The expert_link of this Product1.
        :rtype: str
        """
        return self._expert_link

    @expert_link.setter
    def expert_link(self, expert_link: str):
        """Sets the expert_link of this Product1.


        :param expert_link: The expert_link of this Product1.
        :type expert_link: str
        """

        self._expert_link = expert_link

    @property
    def name(self) -> str:
        """Gets the name of this Product1.


        :return: The name of this Product1.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Product1.


        :param name: The name of this Product1.
        :type name: str
        """

        self._name = name

    @property
    def disorder_flag(self) -> List[Product1DisorderFlag]:
        """Gets the disorder_flag of this Product1.


        :return: The disorder_flag of this Product1.
        :rtype: List[Product1DisorderFlag]
        """
        return self._disorder_flag

    @disorder_flag.setter
    def disorder_flag(self, disorder_flag: List[Product1DisorderFlag]):
        """Sets the disorder_flag of this Product1.


        :param disorder_flag: The disorder_flag of this Product1.
        :type disorder_flag: List[Product1DisorderFlag]
        """

        self._disorder_flag = disorder_flag

    @property
    def synonym(self) -> List[str]:
        """Gets the synonym of this Product1.


        :return: The synonym of this Product1.
        :rtype: List[str]
        """
        return self._synonym

    @synonym.setter
    def synonym(self, synonym: List[str]):
        """Sets the synonym of this Product1.


        :param synonym: The synonym of this Product1.
        :type synonym: List[str]
        """

        self._synonym = synonym

    @property
    def disorder_type(self) -> Product1DisorderType:
        """Gets the disorder_type of this Product1.


        :return: The disorder_type of this Product1.
        :rtype: Product1DisorderType
        """
        return self._disorder_type

    @disorder_type.setter
    def disorder_type(self, disorder_type: Product1DisorderType):
        """Sets the disorder_type of this Product1.


        :param disorder_type: The disorder_type of this Product1.
        :type disorder_type: Product1DisorderType
        """

        self._disorder_type = disorder_type

    @property
    def disorder_nature(self) -> str:
        """Gets the disorder_nature of this Product1.


        :return: The disorder_nature of this Product1.
        :rtype: str
        """
        return self._disorder_nature

    @disorder_nature.setter
    def disorder_nature(self, disorder_nature: str):
        """Sets the disorder_nature of this Product1.


        :param disorder_nature: The disorder_nature of this Product1.
        :type disorder_nature: str
        """

        self._disorder_nature = disorder_nature

    @property
    def disorder_group(self) -> str:
        """Gets the disorder_group of this Product1.


        :return: The disorder_group of this Product1.
        :rtype: str
        """
        return self._disorder_group

    @disorder_group.setter
    def disorder_group(self, disorder_group: str):
        """Sets the disorder_group of this Product1.


        :param disorder_group: The disorder_group of this Product1.
        :type disorder_group: str
        """

        self._disorder_group = disorder_group

    @property
    def external_reference(self) -> List[Product1ExternalReference]:
        """Gets the external_reference of this Product1.


        :return: The external_reference of this Product1.
        :rtype: List[Product1ExternalReference]
        """
        return self._external_reference

    @external_reference.setter
    def external_reference(self, external_reference: List[Product1ExternalReference]):
        """Sets the external_reference of this Product1.


        :param external_reference: The external_reference of this Product1.
        :type external_reference: List[Product1ExternalReference]
        """

        self._external_reference = external_reference

    @property
    def disorder_disorder_association(self) -> List[Product1DisorderDisorderAssociation]:
        """Gets the disorder_disorder_association of this Product1.


        :return: The disorder_disorder_association of this Product1.
        :rtype: List[Product1DisorderDisorderAssociation]
        """
        return self._disorder_disorder_association

    @disorder_disorder_association.setter
    def disorder_disorder_association(self, disorder_disorder_association: List[Product1DisorderDisorderAssociation]):
        """Sets the disorder_disorder_association of this Product1.


        :param disorder_disorder_association: The disorder_disorder_association of this Product1.
        :type disorder_disorder_association: List[Product1DisorderDisorderAssociation]
        """

        self._disorder_disorder_association = disorder_disorder_association

    @property
    def textual_information(self) -> List[Product1TextualInformation]:
        """Gets the textual_information of this Product1.


        :return: The textual_information of this Product1.
        :rtype: List[Product1TextualInformation]
        """
        return self._textual_information

    @textual_information.setter
    def textual_information(self, textual_information: List[Product1TextualInformation]):
        """Sets the textual_information of this Product1.


        :param textual_information: The textual_information of this Product1.
        :type textual_information: List[Product1TextualInformation]
        """

        self._textual_information = textual_information

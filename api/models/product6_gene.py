# coding: utf-8

from __future__ import absolute_import

from typing import List  # noqa: F401

from api.models.base_model_ import Model
from api.models.product6_gene_external_reference import Product6GeneExternalReference  # noqa: F401,E501
from api.models.product6_gene_locus import Product6GeneLocus  # noqa: F401,E501
from api import util


class Product6Gene(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, name: str=None, symbol: str=None, synonym: List[str]=None, gene_type: str=None, external_reference: List[Product6GeneExternalReference]=None, locus: List[Product6GeneLocus]=None):  # noqa: E501
        """Product6Gene - a model defined in Swagger

        :param name: The name of this Product6Gene.  # noqa: E501
        :type name: str
        :param symbol: The symbol of this Product6Gene.  # noqa: E501
        :type symbol: str
        :param synonym: The synonym of this Product6Gene.  # noqa: E501
        :type synonym: List[str]
        :param gene_type: The gene_type of this Product6Gene.  # noqa: E501
        :type gene_type: str
        :param external_reference: The external_reference of this Product6Gene.  # noqa: E501
        :type external_reference: List[Product6GeneExternalReference]
        :param locus: The locus of this Product6Gene.  # noqa: E501
        :type locus: List[Product6GeneLocus]
        """
        self.swagger_types = {
            'name': str,
            'symbol': str,
            'synonym': List[str],
            'gene_type': str,
            'external_reference': List[Product6GeneExternalReference],
            'locus': List[Product6GeneLocus]
        }

        self.attribute_map = {
            'name': 'Name',
            'symbol': 'Symbol',
            'synonym': 'Synonym',
            'gene_type': 'GeneType',
            'external_reference': 'ExternalReference',
            'locus': 'Locus'
        }
        self._name = name
        self._symbol = symbol
        self._synonym = synonym
        self._gene_type = gene_type
        self._external_reference = external_reference
        self._locus = locus

    @classmethod
    def from_dict(cls, dikt) -> 'Product6Gene':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The product6_Gene of this Product6Gene.  # noqa: E501
        :rtype: Product6Gene
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this Product6Gene.


        :return: The name of this Product6Gene.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Product6Gene.


        :param name: The name of this Product6Gene.
        :type name: str
        """

        self._name = name

    @property
    def symbol(self) -> str:
        """Gets the symbol of this Product6Gene.


        :return: The symbol of this Product6Gene.
        :rtype: str
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol: str):
        """Sets the symbol of this Product6Gene.


        :param symbol: The symbol of this Product6Gene.
        :type symbol: str
        """

        self._symbol = symbol

    @property
    def synonym(self) -> List[str]:
        """Gets the synonym of this Product6Gene.


        :return: The synonym of this Product6Gene.
        :rtype: List[str]
        """
        return self._synonym

    @synonym.setter
    def synonym(self, synonym: List[str]):
        """Sets the synonym of this Product6Gene.


        :param synonym: The synonym of this Product6Gene.
        :type synonym: List[str]
        """

        self._synonym = synonym

    @property
    def gene_type(self) -> str:
        """Gets the gene_type of this Product6Gene.


        :return: The gene_type of this Product6Gene.
        :rtype: str
        """
        return self._gene_type

    @gene_type.setter
    def gene_type(self, gene_type: str):
        """Sets the gene_type of this Product6Gene.


        :param gene_type: The gene_type of this Product6Gene.
        :type gene_type: str
        """

        self._gene_type = gene_type

    @property
    def external_reference(self) -> List[Product6GeneExternalReference]:
        """Gets the external_reference of this Product6Gene.


        :return: The external_reference of this Product6Gene.
        :rtype: List[Product6GeneExternalReference]
        """
        return self._external_reference

    @external_reference.setter
    def external_reference(self, external_reference: List[Product6GeneExternalReference]):
        """Sets the external_reference of this Product6Gene.


        :param external_reference: The external_reference of this Product6Gene.
        :type external_reference: List[Product6GeneExternalReference]
        """

        self._external_reference = external_reference

    @property
    def locus(self) -> List[Product6GeneLocus]:
        """Gets the locus of this Product6Gene.


        :return: The locus of this Product6Gene.
        :rtype: List[Product6GeneLocus]
        """
        return self._locus

    @locus.setter
    def locus(self, locus: List[Product6GeneLocus]):
        """Sets the locus of this Product6Gene.


        :param locus: The locus of this Product6Gene.
        :type locus: List[Product6GeneLocus]
        """

        self._locus = locus

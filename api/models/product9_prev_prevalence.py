# coding: utf-8

from __future__ import absolute_import

from api.models.base_model_ import Model
from api import util


class Product9PrevPrevalence(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, source: str=None, prevalence_type: str=None, prevalence_qualification: str=None, prevalence_class: str=None, val_moy: str=None, prevalence_geographic: str=None, prevalence_validation_status: str=None):  # noqa: E501
        """Product9PrevPrevalence - a model defined in Swagger

        :param source: The source of this Product9PrevPrevalence.  # noqa: E501
        :type source: str
        :param prevalence_type: The prevalence_type of this Product9PrevPrevalence.  # noqa: E501
        :type prevalence_type: str
        :param prevalence_qualification: The prevalence_qualification of this Product9PrevPrevalence.  # noqa: E501
        :type prevalence_qualification: str
        :param prevalence_class: The prevalence_class of this Product9PrevPrevalence.  # noqa: E501
        :type prevalence_class: str
        :param val_moy: The val_moy of this Product9PrevPrevalence.  # noqa: E501
        :type val_moy: str
        :param prevalence_geographic: The prevalence_geographic of this Product9PrevPrevalence.  # noqa: E501
        :type prevalence_geographic: str
        :param prevalence_validation_status: The prevalence_validation_status of this Product9PrevPrevalence.  # noqa: E501
        :type prevalence_validation_status: str
        """
        self.swagger_types = {
            'source': str,
            'prevalence_type': str,
            'prevalence_qualification': str,
            'prevalence_class': str,
            'val_moy': str,
            'prevalence_geographic': str,
            'prevalence_validation_status': str
        }

        self.attribute_map = {
            'source': 'Source',
            'prevalence_type': 'PrevalenceType',
            'prevalence_qualification': 'PrevalenceQualification',
            'prevalence_class': 'PrevalenceClass',
            'val_moy': 'ValMoy',
            'prevalence_geographic': 'PrevalenceGeographic',
            'prevalence_validation_status': 'PrevalenceValidationStatus'
        }
        self._source = source
        self._prevalence_type = prevalence_type
        self._prevalence_qualification = prevalence_qualification
        self._prevalence_class = prevalence_class
        self._val_moy = val_moy
        self._prevalence_geographic = prevalence_geographic
        self._prevalence_validation_status = prevalence_validation_status

    @classmethod
    def from_dict(cls, dikt) -> 'Product9PrevPrevalence':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The product9_prev_Prevalence of this Product9PrevPrevalence.  # noqa: E501
        :rtype: Product9PrevPrevalence
        """
        return util.deserialize_model(dikt, cls)

    @property
    def source(self) -> str:
        """Gets the source of this Product9PrevPrevalence.


        :return: The source of this Product9PrevPrevalence.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source: str):
        """Sets the source of this Product9PrevPrevalence.


        :param source: The source of this Product9PrevPrevalence.
        :type source: str
        """

        self._source = source

    @property
    def prevalence_type(self) -> str:
        """Gets the prevalence_type of this Product9PrevPrevalence.


        :return: The prevalence_type of this Product9PrevPrevalence.
        :rtype: str
        """
        return self._prevalence_type

    @prevalence_type.setter
    def prevalence_type(self, prevalence_type: str):
        """Sets the prevalence_type of this Product9PrevPrevalence.


        :param prevalence_type: The prevalence_type of this Product9PrevPrevalence.
        :type prevalence_type: str
        """

        self._prevalence_type = prevalence_type

    @property
    def prevalence_qualification(self) -> str:
        """Gets the prevalence_qualification of this Product9PrevPrevalence.


        :return: The prevalence_qualification of this Product9PrevPrevalence.
        :rtype: str
        """
        return self._prevalence_qualification

    @prevalence_qualification.setter
    def prevalence_qualification(self, prevalence_qualification: str):
        """Sets the prevalence_qualification of this Product9PrevPrevalence.


        :param prevalence_qualification: The prevalence_qualification of this Product9PrevPrevalence.
        :type prevalence_qualification: str
        """

        self._prevalence_qualification = prevalence_qualification

    @property
    def prevalence_class(self) -> str:
        """Gets the prevalence_class of this Product9PrevPrevalence.


        :return: The prevalence_class of this Product9PrevPrevalence.
        :rtype: str
        """
        return self._prevalence_class

    @prevalence_class.setter
    def prevalence_class(self, prevalence_class: str):
        """Sets the prevalence_class of this Product9PrevPrevalence.


        :param prevalence_class: The prevalence_class of this Product9PrevPrevalence.
        :type prevalence_class: str
        """

        self._prevalence_class = prevalence_class

    @property
    def val_moy(self) -> str:
        """Gets the val_moy of this Product9PrevPrevalence.


        :return: The val_moy of this Product9PrevPrevalence.
        :rtype: str
        """
        return self._val_moy

    @val_moy.setter
    def val_moy(self, val_moy: str):
        """Sets the val_moy of this Product9PrevPrevalence.


        :param val_moy: The val_moy of this Product9PrevPrevalence.
        :type val_moy: str
        """

        self._val_moy = val_moy

    @property
    def prevalence_geographic(self) -> str:
        """Gets the prevalence_geographic of this Product9PrevPrevalence.


        :return: The prevalence_geographic of this Product9PrevPrevalence.
        :rtype: str
        """
        return self._prevalence_geographic

    @prevalence_geographic.setter
    def prevalence_geographic(self, prevalence_geographic: str):
        """Sets the prevalence_geographic of this Product9PrevPrevalence.


        :param prevalence_geographic: The prevalence_geographic of this Product9PrevPrevalence.
        :type prevalence_geographic: str
        """

        self._prevalence_geographic = prevalence_geographic

    @property
    def prevalence_validation_status(self) -> str:
        """Gets the prevalence_validation_status of this Product9PrevPrevalence.


        :return: The prevalence_validation_status of this Product9PrevPrevalence.
        :rtype: str
        """
        return self._prevalence_validation_status

    @prevalence_validation_status.setter
    def prevalence_validation_status(self, prevalence_validation_status: str):
        """Sets the prevalence_validation_status of this Product9PrevPrevalence.


        :param prevalence_validation_status: The prevalence_validation_status of this Product9PrevPrevalence.
        :type prevalence_validation_status: str
        """

        self._prevalence_validation_status = prevalence_validation_status

# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Disorder(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, orph_acode: str=None, name: str=None, hierarchy_id: str=None, parents: List[str]=None, childs: List[str]=None):  # noqa: E501
        """Disorder - a model defined in Swagger

        :param orph_acode: The orph_acode of this Disorder.  # noqa: E501
        :type orph_acode: str
        :param name: The name of this Disorder.  # noqa: E501
        :type name: str
        :param hierarchy_id: The hierarchy_id of this Disorder.  # noqa: E501
        :type hierarchy_id: str
        :param parents: The parents of this Disorder.  # noqa: E501
        :type parents: List[str]
        :param childs: The childs of this Disorder.  # noqa: E501
        :type childs: List[str]
        """
        self.swagger_types = {
            'orph_acode': str,
            'name': str,
            'hierarchy_id': str,
            'parents': List[str],
            'childs': List[str]
        }

        self.attribute_map = {
            'orph_acode': 'ORPHAcode',
            'name': 'name',
            'hierarchy_id': 'hierarchyId',
            'parents': 'parents',
            'childs': 'childs'
        }
        self._orph_acode = orph_acode
        self._name = name
        self._hierarchy_id = hierarchy_id
        self._parents = parents
        self._childs = childs

    @classmethod
    def from_dict(cls, dikt) -> 'Disorder':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The disorder of this Disorder.  # noqa: E501
        :rtype: Disorder
        """
        return util.deserialize_model(dikt, cls)

    @property
    def orph_acode(self) -> str:
        """Gets the orph_acode of this Disorder.


        :return: The orph_acode of this Disorder.
        :rtype: str
        """
        return self._orph_acode

    @orph_acode.setter
    def orph_acode(self, orph_acode: str):
        """Sets the orph_acode of this Disorder.


        :param orph_acode: The orph_acode of this Disorder.
        :type orph_acode: str
        """
        if orph_acode is None:
            raise ValueError("Invalid value for `orph_acode`, must not be `None`")  # noqa: E501

        self._orph_acode = orph_acode

    @property
    def name(self) -> str:
        """Gets the name of this Disorder.


        :return: The name of this Disorder.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Disorder.


        :param name: The name of this Disorder.
        :type name: str
        """

        self._name = name

    @property
    def hierarchy_id(self) -> str:
        """Gets the hierarchy_id of this Disorder.


        :return: The hierarchy_id of this Disorder.
        :rtype: str
        """
        return self._hierarchy_id

    @hierarchy_id.setter
    def hierarchy_id(self, hierarchy_id: str):
        """Sets the hierarchy_id of this Disorder.


        :param hierarchy_id: The hierarchy_id of this Disorder.
        :type hierarchy_id: str
        """

        self._hierarchy_id = hierarchy_id

    @property
    def parents(self) -> List[str]:
        """Gets the parents of this Disorder.


        :return: The parents of this Disorder.
        :rtype: List[str]
        """
        return self._parents

    @parents.setter
    def parents(self, parents: List[str]):
        """Sets the parents of this Disorder.


        :param parents: The parents of this Disorder.
        :type parents: List[str]
        """

        self._parents = parents

    @property
    def childs(self) -> List[str]:
        """Gets the childs of this Disorder.


        :return: The childs of this Disorder.
        :rtype: List[str]
        """
        return self._childs

    @childs.setter
    def childs(self, childs: List[str]):
        """Sets the childs of this Disorder.


        :param childs: The childs of this Disorder.
        :type childs: List[str]
        """

        self._childs = childs
